[package]
name = "ethercrab"
categories = ["science::robotics", "no-std", "network-programming"]
version = "0.6.0"
edition = "2024"
license = "MIT OR Apache-2.0"
readme = "README.md"
repository = "https://github.com/ethercrab-rs/ethercrab"
documentation = "https://docs.rs/ethercrab"
description = "A pure Rust EtherCAT MainDevice supporting std and no_std environments"
keywords = ["ethercat", "beckhoff", "automation", "fieldbus", "robotics"]
exclude = ["dumps", "doc", "NOTES.md", "SPECNOTES.md"]
resolver = "2"
rust-version = "1.85"

[workspace]#工作区的配置部分。工作区允许你在一个项目中管理多个相互关联的 crate，这些 crate 可以共享依赖，统一构建和测试。
members = ["ethercrab-wire", "ethercrab-wire-derive"]#该字段列出了工作区包含的子 crate 列表。["ethercrab-wire", "ethercrab-wire-derive"] 表明工作区包含 ethercrab-wire 和 ethercrab-wire-derive 这两个子 crate。Cargo 会在当前目录下查找这两个子 crate 对应的目录。

[package.metadata.docs.rs] #docs.rs 服务的元数据配置。docs.rs 是 Rust 官方的文档托管服务，用于自动构建和托管 Rust 项目的文档。
default-target = "x86_64-unknown-linux-gnu"
targets = ["x86_64-unknown-linux-gnu", "x86_64-pc-windows-gnu"]

[dependencies]
async-io = { version = "2.0.0", optional = true }
atomic-waker = "1.1.2"
atomic_enum = "0.3.0"
bitflags = "2.9.0"
defmt = { version = "0.3.5", optional = true } #optional = true：表示该依赖是可选的。默认情况下，Cargo 编译项目时不会包含这个依赖。若要使用 defmt 库，需要在 Cargo.toml 的 [features] 部分定义一个特性来启用它，或者在编译时通过 --features 选项手动启用。
embassy-time = "0.4.0"
embedded-io-async = { version = "0.6.0", default-features = false }
futures-lite = { version = "2.0.0", default-features = false }
heapless = "0.8.0"
log = { version = "0.4.27", optional = true, default-features = false }
sealed = "0.6.0"
serde = { version = "1.0.190", features = ["derive"], optional = true }
smlang = "0.8.0"
ethercrab-wire = { version = "0.2.0", path = "./ethercrab-wire" }
spin = { version = "0.10.0", default-features = false, features = ["rwlock"] }
crc = { version = "3.2.1", default-features = false }

[target.'cfg(target_os = "windows")'.dependencies]
pnet_datalink = { version = "0.35.0", features = ["std"], optional = true }
pcap = "2.2.0"

[target.'cfg(unix)'.dependencies]
libc = "0.2.149"
nix = { version = "0.29.0", features = ["net"] }

[target.'cfg(target_os = "linux")'.dependencies]
io-uring = "0.7.4"
smallvec = { version = "1.13.1", features = ["const_generics"] }
slab = "0.4.9"
timerfd = "1.5.0"
xsk-rs = { version = "0.7.0", optional = true }

[dev-dependencies]
arbitrary = { version = "1.3.1", features = ["derive"] }
criterion = { version = "0.5.1", default-features = false, features = [
    "cargo_bench_support",
] }
env_logger = "0.11.6"
heckcheck = "2.0.1"
pcap-file = "2.0.0"
pretty_assertions = "1.4.0"
smol = "2.0.0"
tokio = { version = "1.33.0", features = [
    "rt-multi-thread",
    "macros",
    "sync",
    "time",
] }
thread-priority = "1.2.0"
ta = "0.5.0"
cassette = "0.3.0"
csv = "1.3.0"
serde = { version = "1.0.190", default-features = false, features = ["derive"] }
signal-hook = "0.3.17"
core_affinity = "0.8.1"
spin_sleep = "1.2.1"
quanta = "0.12.3"
savefile = { version = "0.18.5", default-features = false }
savefile-derive = { version = "0.18.5", default-features = false }
simple_logger = { version = "5.0.0", default-features = false }
smoltcp = { version = "0.12.0", default-features = false, features = [
    "medium-ethernet",
    "proto-ipv4",
    "socket-raw",
] }

[features]
default = ["std"]
defmt = [
    "dep:defmt",
    "embedded-io-async/defmt-03",
    "heapless/defmt-03",
    "ethercrab-wire/defmt-03",
]
log = ["dep:log"]
std = [
    "dep:pnet_datalink",
    "dep:async-io",
    "log",
    "futures-lite/std",
    "embedded-io-async/std",
    "ethercrab-wire/std",
    "spin/std",
]
xdp = ["dep:xsk-rs"]
serde = ["dep:serde", "bitflags/serde"]

# [[example]]
# name = "akd"
# required-features = ["std"]

[[example]]
name = "xdp"
required-features = ["std", "xdp"]

[[example]]
name = "xdp"
required-features = ["std", "xdp"]

[[example]] # 这是一个数组表（array of tables）语法，用于定义项目中的示例代码。每个 [[example]] 块代表一个独立的示例。
name = "dc" # 指定示例代码文件的名称，Rust 会在项目的 examples 目录下查找与该名称匹配的 .rs 文件
required-features = ["std"] # 指定示例代码所需的特性（features）。这里指定了 "std" 特性，表示示例代码需要标准库的支持。

# [[example]]
# name = "ec400"
# required-features = ["std"]

[[example]]
name = "ek1100"
required-features = ["std"]

[[example]]
name = "multiple-groups"
required-features = ["std"]

[[bench]] # 这是一个数组表（array of tables）语法，用于定义项目中的基准测试代码。每个 [[bench]] 块代表一个独立的基准测试。
name = "pdu_loop" # 指定基准测试代码文件的名称，Rust 会在项目的 benches 目录下查找与该名称匹配的.rs 文件
harness = false   # 表示不使用默认的基准测试框架。默认情况下，Cargo 会提供一个基准测试框架，设置为 false 后，开发者需要自己实现基准测试逻辑。

[[bench]]
name = "frame"
harness = false

[profile.profiling] #定义一个名为 profiling 的自定义构建配置文件。在 Cargo 中，profile 用于配置不同构建模式（如 dev、release）的编译选项。
inherits = "release" # 表示 profiling 配置继承 release 配置的所有设置，这意味着 profiling 模式会采用 release 模式的优化级别等编译选项。
debug = true #在继承 release 配置的基础上，开启调试信息。这样在 profiling 模式下编译的代码既具有较高的优化程度，又包含调试信息，方便进行性能分析和调试。
